import asyncio
import aiogram
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from user_base_worker import user_file
import json
from user_base_worker import add_base

# –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import api_main, api_statistics

# —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=api_main, parse_mode="HTML")

# –ø–æ–¥–∫–ª—é—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot, storage=MemoryStorage())

# —Å–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å(—Ç–æ–∂–µ –±–æ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π, –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ—É –∞–¥–º–∏–Ω—É)
statistic_bot = Bot(token=api_statistics, parse_mode="HTML")

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤, —Ç–∞–º –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ –Ω–∏—Ö —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä–µ–π
# username/ id/ cjm/ last_message/ kurs/ napravlenie/ group/ nedelya/ day
from user_base_worker import user_base
from user_base_worker import client_info
from config import admin


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
from datetime import datetime

time = 0

async def get_time():
    global time
    time = datetime.now().strftime("%d.%m %H:%M:%S")

from new_worker import create_raspisanie
from new_worker import all_groups, all_raspisanie, create_timetable,create_oneday_timetable
from new_worker import groups_with_napr


# —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    for i in all_groups:
        ikb.row(InlineKeyboardButton(i+" –∫—É—Ä—Å", callback_data=i+"kurs"))
        kurs_handlers.append(i+"kurs")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?",
                               reply_markup=ikb)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç = –¥–æ–±–∞–≤–ª—è–µ–º
    if str(message.from_user.id) not in user_base or message.from_user.id in user_base:

        user_base[str(message.from_user.id)] = {
            "username": "@" + message.from_user.username,
            "id": message.from_user.id,
            "cjm": [],
            "last_message": msg.message_id
        }

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–í–æ—à—ë–ª –≤ –±–æ—Ç–∞</b>")
    user_base[str(message.from_user.id)]["last_message"] = msg.message_id

    # –ø–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ user_base
    info = await client_info(message.from_user.id)

    #–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–π–¥–∏, —é–∑–µ—Ä–Ω–µ–π–º—ã, –±–∞–∑—É
    await user_file()
    media = types.MediaGroup()
    media.attach_document(types.InputFile('system_file.txt'))
    media.attach_document(types.InputFile('cjm_file.txt'))
    media.attach_document(types.InputFile('id_file.txt'))
    media.attach_document(types.InputFile('username_file.txt'),caption=f'<b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n'
                                                                     f'{info}')

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for i in admin:
        await statistic_bot.send_media_group(chat_id=i,
                                             media=media)

kurs_handlers=[]
@dp.callback_query_handler(text=kurs_handlers)
async def kurs_handler(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–ù–∞–∂–∞–ª –Ω–∞ {message.data} –∫—É—Ä—Å</b>")

    user_base[str(message.from_user.id)]["kurs"] = message.data[0]

    ikb = InlineKeyboardMarkup(row_width=2)
    for i in groups_with_napr[user_base[str(message.from_user.id)]["kurs"]]:
        ikb.insert(InlineKeyboardButton(i, callback_data=i))
        napravlenie_handlers.append(i)

    await bot.edit_message_text(chat_id=message.from_user.id,
                                message_id=user_base[str(message.from_user.id)]["last_message"],
                                text="–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                reply_markup=ikb)

napravlenie_handlers=[]
@dp.callback_query_handler(text=napravlenie_handlers)
async def naprevlenie_handler(message: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–ù–∞–∂–∞–ª –Ω–∞ {message.data}</b>")

    user_base[str(message.from_user.id)]["napravlenie"] = message.data

    ikb = InlineKeyboardMarkup(row_width=2)
    for i in groups_with_napr[user_base[str(message.from_user.id)]["kurs"]][message.data]:
        ikb.insert(InlineKeyboardButton(i, callback_data=i))
        group_handlers.append(i)

    await bot.edit_message_text(chat_id=message.from_user.id,
                                message_id=user_base[str(message.from_user.id)]["last_message"],
                                text="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",
                                reply_markup=ikb)

group_handlers=[]
@dp.callback_query_handler(text=group_handlers)
async def group_handler(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()
    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–ù–∞–∂–∞–ª –Ω–∞ {message.data}</b>")
    user_base[str(message.from_user.id)]["group"] = message.data
    user_base[str(message.from_user.id)]["nedelya"] = "–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
    user_base[str(message.from_user.id)]["day"] = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"

    user = user_base[str(message.from_user.id)]

    ikb=InlineKeyboardMarkup(row_width=3)
    days={"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":"–ø–Ω",
          "–í—Ç–æ—Ä–Ω–∏–∫":"–≤—Ç",
          "–°—Ä–µ–¥–∞":"—Å—Ä",
          "–ß–µ—Ç–≤–µ—Ä–≥":"—á—Ç",
          "–ü—è—Ç–Ω–∏—Ü–≤":"–ø—Ç",
          "–°—É–±–±–æ—Ç–∞":"—Å–±"}

    for i in ["–ø–Ω","–≤—Ç","—Å—Ä","—á—Ç","–ø—Ç","—Å–±"]:
        if i==days[user["day"]]:
            ikb.insert(InlineKeyboardButton("‚úÖ "+i, callback_data=i))
        else:
            ikb.insert(InlineKeyboardButton(i, callback_data=i))

    if user["nedelya"] == "–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è":
        ikb.row(InlineKeyboardButton("üîÑ –ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è",callback_data="change_week"))
    else:
        ikb.row(InlineKeyboardButton("üîÑ –ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="change_week"))

    ikb.row(InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", callback_data="start"))


    msg = await create_oneday_timetable(user["kurs"], user['group'],user["nedelya"],user["day"])

    await bot.edit_message_text(chat_id=message.from_user.id,
                                message_id=user_base[str(message.from_user.id)]["last_message"],
                                text=f"{msg}",
                                reply_markup=ikb)

callback_days=["–ø–Ω","–≤—Ç","—Å—Ä","—á—Ç","–ø—Ç","—Å–±"]
@dp.callback_query_handler(text=callback_days)
async def days_handler(message: types.CallbackQuery):

    if message.data=="–ø–Ω":
        user_base[str(message.from_user.id)]["day"] = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    elif message.data=="–≤—Ç":
        user_base[str(message.from_user.id)]["day"] = "–í—Ç–æ—Ä–Ω–∏–∫"
    elif message.data=="—Å—Ä":
        user_base[str(message.from_user.id)]["day"] = "–°—Ä–µ–¥–∞"
    elif message.data=="—á—Ç":
        user_base[str(message.from_user.id)]["day"] = "–ß–µ—Ç–≤–µ—Ä–≥"
    elif message.data=="–ø—Ç":
        user_base[str(message.from_user.id)]["day"] = "–ü—è—Ç–Ω–∏—Ü–∞"
    elif message.data=="—Å–±":
        user_base[str(message.from_user.id)]["day"] = "–°—É–±–±–æ—Ç–∞"

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()
    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–ù–∞–∂–∞–ª –Ω–∞ {message.data}</b>")

    user = user_base[str(message.from_user.id)]

    ikb = InlineKeyboardMarkup(row_width=3)
    days = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–Ω",
            "–í—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç",
            "–°—Ä–µ–¥–∞": "—Å—Ä",
            "–ß–µ—Ç–≤–µ—Ä–≥": "—á—Ç",
            "–ü—è—Ç–Ω–∏—Ü–∞": "–ø—Ç",
            "–°—É–±–±–æ—Ç–∞": "—Å–±"}

    for i in ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"]:
        if i == days[user["day"]]:
            ikb.insert(InlineKeyboardButton("‚úÖ " + i, callback_data=i))
        else:
            ikb.insert(InlineKeyboardButton(i, callback_data=i))

    if user["nedelya"] == "–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è":
        ikb.row(InlineKeyboardButton("üîÑ –ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è",callback_data="change_week"))
    else:
        ikb.row(InlineKeyboardButton("üîÑ –ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="change_week"))

    ikb.row(InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", callback_data="start"))

    msg = await create_oneday_timetable(user["kurs"], user['group'], user["nedelya"], user["day"])

    await bot.edit_message_text(chat_id=message.from_user.id,
                                message_id=user_base[str(message.from_user.id)]["last_message"],
                                text=f"{msg}",
                                reply_markup=ikb)

@dp.callback_query_handler(text="change_week")
async def days_handler(message: types.CallbackQuery):

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()
    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–ù–∞–∂–∞–ª –Ω–∞ {message.data}</b>")

    user = user_base[str(message.from_user.id)]

    ikb = InlineKeyboardMarkup(row_width=3)
    days = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ø–Ω",
            "–í—Ç–æ—Ä–Ω–∏–∫": "–≤—Ç",
            "–°—Ä–µ–¥–∞": "—Å—Ä",
            "–ß–µ—Ç–≤–µ—Ä–≥": "—á—Ç",
            "–ü—è—Ç–Ω–∏—Ü–∞": "–ø—Ç",
            "–°—É–±–±–æ—Ç–∞": "—Å–±"}

    for i in ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"]:
        if i == days[user["day"]]:
            ikb.insert(InlineKeyboardButton("‚úÖ " + i, callback_data=i))
        else:
            ikb.insert(InlineKeyboardButton(i, callback_data=i))

    if user["nedelya"] == "–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è":
        ikb.row(InlineKeyboardButton("üîÑ –ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="change_week"))
        user['nedelya'] = "–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
    else:
        ikb.row(InlineKeyboardButton("üîÑ –ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", callback_data="change_week"))
        user['nedelya'] = "–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"

    ikb.row(InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", callback_data="start"))

    msg = await create_oneday_timetable(user["kurs"], user['group'], user["nedelya"], user["day"])

    await bot.edit_message_text(chat_id=message.from_user.id,
                                message_id=user_base[str(message.from_user.id)]["last_message"],
                                text=f"{msg}",
                                reply_markup=ikb)

@dp.callback_query_handler(text="start")
async def start_clb(message: types.CallbackQuery):
    # –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    ikb = InlineKeyboardMarkup()
    for i in all_groups:
        ikb.row(InlineKeyboardButton(i + " –∫—É—Ä—Å", callback_data=i + "kurs"))
        kurs_handlers.append(i + "kurs")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await bot.edit_message_text(text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?",
                                      reply_markup=ikb,
                                      chat_id=message.from_user.id,
                                      message_id=user_base[str(message.from_user.id)]["last_message"])

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    await get_time()

    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_base[str(message.from_user.id)]["cjm"].append(f"{time} = <b>–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã</b>")








#–ó–ê–ì–†–£–ó–ö–ê –°–ò–°–¢–ï–ú –§–ê–ô–õ–ê
@dp.message_handler(content_types=ContentType.DOCUMENT)
async def base_in(doc: types.Message):
    await doc.delete()
    file = await doc.document.download(destination_file="system_file.txt")

    stroka = open("system_file.txt", "r").readline().replace("'", chr(34))
    dictionary = json.loads(stroka)

    await add_base(dictionary)

    await get_time()

    await user_file()
    media = types.MediaGroup()
    media.attach_document(types.InputFile('system_file.txt'))
    media.attach_document(types.InputFile('cjm_file.txt'))
    media.attach_document(types.InputFile('id_file.txt'))
    media.attach_document(types.InputFile('username_file.txt'), caption=f"–ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n{time}")
    await statistic_bot.send_media_group(chat_id=doc.from_user.id,
                                         media=media)

#–ü–†–û–ß–ò–ï –ö–û–ú–ê–ù–î–´
@dp.message_handler()
async def error(message: types.Message):
    await message.delete()
    if str(message.from_user.id) in admin:
        if message.text in user_base:
            info = await client_info(message.text)

            await user_file()
            media = types.MediaGroup()
            media.attach_document(types.InputFile('system_file.txt'))
            media.attach_document(types.InputFile('cjm_file.txt'))
            media.attach_document(types.InputFile('id_file.txt'))
            media.attach_document(types.InputFile('username_file.txt'), caption=f'{info}')

            await statistic_bot.send_media_group(chat_id=message.from_user.id,
                                                 media=media)
        if message.text=="clear":
            for i in user_base:
                await bot.delete_message(chat_id=str(i),
                                         message_id=user_base[str(message.from_user.id)]['last_message'])

        if message.text=="create":
            await create_raspisanie()

    else:
        for i in admin:
            await statistic_bot.send_message(chat_id=i,
                                             text=f"@{message.from_user.username}\n"
                                                  f"<code>{message.from_user.id}</code>\n\n"
                                                  f"<b>–æ—à–∏–±–∫–∞:</b> {message.text}")

if __name__ == "__main__":
    executor.start_polling(dp,
                           skip_updates=True)


